Secode version 1.0 (C) 2021
Number of rules (primarily dangerous function names) in C/C++ ruleset: 223
Examining Vulnerable_7.c

FINAL RESULTS:

Vulnerable_7.c:28:  [5] (buffer) gets:
  Does not check for buffer overflows (CWE-120, CWE-20).
  --------------------------------------------------------------------------
  [+] Use fgets() instead.

Vulnerable_7.c:31:  [5] (buffer) gets:
  Does not check for buffer overflows (CWE-120, CWE-20).
  --------------------------------------------------------------------------
  [+] Use fgets() instead.

Vulnerable_7.c:32:  [5] (buffer) gets:
  Does not check for buffer overflows (CWE-120, CWE-20).
  --------------------------------------------------------------------------
  [+] Use fgets() instead.

Vulnerable_7.c:60:  [5] (buffer) strncat:
  Easily used incorrectly (e.g., incorrectly computing the correct maximum
  size to add) [MS-banned] (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider strcat_s, strlcat, snprintf, or automatically resizing
  strings. Risk is high; the length parameter appears to be a constant,
  instead of computing the number of characters left.

Vulnerable_7.c:61:  [5] (buffer) _tcsncat:
  Easily used incorrectly (e.g., incorrectly computing the correct maximum
  size to add) [MS-banned] (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider strcat_s, strlcat, or automatically resizing strings. Risk is
  high; the length parameter appears to be a constant, instead of computing
  the number of characters left.

Vulnerable_7.c:64:  [5] (buffer) MultiByteToWideChar:
  Requires maximum length in CHARACTERS, not bytes (CWE-120).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified. Risk is high, it appears that the
  size is given as bytes, but the function requires size as characters.

Vulnerable_7.c:66:  [5] (buffer) MultiByteToWideChar:
  Requires maximum length in CHARACTERS, not bytes (CWE-120).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified. Risk is high, it appears that the
  size is given as bytes, but the function requires size as characters.

Vulnerable_7.c:77:  [5] (misc) SetSecurityDescriptorDacl:
  Never create NULL ACLs; an attacker can set it to Everyone (Deny All
  Access), which would even forbid administrator access (CWE-732).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified.

Vulnerable_7.c:77:  [5] (misc) SetSecurityDescriptorDacl:
  Never create NULL ACLs; an attacker can set it to Everyone (Deny All
  Access), which would even forbid administrator access (CWE-732).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified.

Vulnerable_7.c:17:  [4] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination [MS-banned]
  (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily
  misused).

Vulnerable_7.c:20:  [4] (buffer) sprintf:
  Does not check for buffer overflows (CWE-120).
  --------------------------------------------------------------------------
  [+] Use sprintf_s, snprintf, or vsnprintf.

Vulnerable_7.c:21:  [4] (buffer) sprintf:
  Does not check for buffer overflows (CWE-120).
  --------------------------------------------------------------------------
  [+] Use sprintf_s, snprintf, or vsnprintf.

Vulnerable_7.c:22:  [4] (format) sprintf:
  Potential format string problem (CWE-134). Make format string constant.

Vulnerable_7.c:23:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be exploited
  (CWE-134).
  --------------------------------------------------------------------------
  [+] Use a constant for the format specification.

Vulnerable_7.c:25:  [4] (buffer) scanf:
  The scanf() family's %s operation, without a limit specification, permits
  buffer overflows (CWE-120, CWE-20).
  --------------------------------------------------------------------------
  [+] Specify a limit to %s, or use a different input function.

Vulnerable_7.c:27:  [4] (buffer) scanf:
  The scanf() family's %s operation, without a limit specification, permits
  buffer overflows (CWE-120, CWE-20).
  --------------------------------------------------------------------------
  [+] Specify a limit to %s, or use a different input function.

Vulnerable_7.c:38:  [4] (format) syslog:
  If syslog's format strings can be influenced by an attacker, they can be
  exploited (CWE-134).
  --------------------------------------------------------------------------
  [+] Use a constant format string for syslog.

Vulnerable_7.c:49:  [4] (buffer) _mbscpy:
  Does not check for buffer overflows when copying to destination [MS-banned]
  (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider using a function version that stops copying at the end of the
  buffer.

Vulnerable_7.c:56:  [4] (--------------------------------------------------------------------------  [+]  NO countermeasures,unless specifiedbuffer) lstrcat:
  Does not check for buffer overflows when concatenating to destination
  [MS-banned] (CWE-120).

Vulnerable_7.c:79:  [3] (shell) CreateProcess:
  This causes a new process to execute and is difficult to use safely
  (CWE-78).
  --------------------------------------------------------------------------
  [+] Specify the application path in the first argument, NOT as part of the
  second, or embedded spaces could allow an attacker to force a different
  program to run.

Vulnerable_7.c:79:  [3] (shell) CreateProcess:
  This causes a new process to execute and is difficult to use safely
  (CWE-78).
  --------------------------------------------------------------------------
  [+] Specify the application path in the first argument, NOT as part of the
  second, or embedded spaces could allow an attacker to force a different
  program to run.

Vulnerable_7.c:95:  [3] (buffer) getopt_long:
  Some older implementations do not protect against internal buffer overflows
  (CWE-120, CWE-20).
  --------------------------------------------------------------------------
  [+] Check implementation on installation, or limit the size of all string
  inputs.

Vulnerable_7.c:16:  [2] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination [MS-banned]
  (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily
  misused). Risk is low because the source is a constant string.

Vulnerable_7.c:19:  [2] (buffer) sprintf:
  Does not check for buffer overflows (CWE-120).
  --------------------------------------------------------------------------
  [+] Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source
  has a constant maximum length.

Vulnerable_7.c:45:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119!/CWE-120).
  --------------------------------------------------------------------------
  [+] Perform bounds checking, use functions that limit length, or ensure
  that the size is larger than the maximum possible length.

Vulnerable_7.c:46:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119!/CWE-120).
  --------------------------------------------------------------------------
  [+] Perform bounds checking, use functions that limit length, or ensure
  that the size is larger than the maximum possible length.

Vulnerable_7.c:50:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  --------------------------------------------------------------------------
  [+] Make sure destination can always hold the source data.

Vulnerable_7.c:53:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  --------------------------------------------------------------------------
  [+] Make sure destination can always hold the source data.

Vulnerable_7.c:54:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  --------------------------------------------------------------------------
  [+] Make sure destination can always hold the source data.

Vulnerable_7.c:55:  [2] (buffer) CopyMemory:
  Does not check for buffer overflows when copying to destination (CWE-120).
  --------------------------------------------------------------------------
  [+] Make sure destination can always hold the source data.

Vulnerable_7.c:101:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move things
  around to create a race condition, control its ancestors, or change its
  contents? (CWE-362).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified.

Vulnerable_7.c:15:  [1] (buffer) strcpy:
  Does not check for buffer overflows when copying to destination [MS-banned]
  (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily
  misused). Risk is low because the source is a constant character.

Vulnerable_7.c:18:  [1] (buffer) sprintf:
  Does not check for buffer overflows (CWE-120).
  --------------------------------------------------------------------------
  [+] Use sprintf_s, snprintf, or vsnprintf. Risk is low because the source
  is a constant character.

Vulnerable_7.c:26:  [1] (buffer) scanf:
  It's unclear if the %s limit in the format string is small enough
  (CWE-120). Check that the limit is sufficiently small, or use a different
  input function.

Vulnerable_7.c:57:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for invalid
  pointers [MS-banned] (CWE-120).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified.

Vulnerable_7.c:58:  [1] (buffer) _tcsncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for invalid
  pointers [MS-banned] (CWE-120).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified.

Vulnerable_7.c:59:  [1] (buffer) strncat:
  Easily used incorrectly (e.g., incorrectly computing the correct maximum
  size to add) [MS-banned] (CWE-120).
  --------------------------------------------------------------------------
  [+] Consider strcat_s, strlcat, snprintf, or automatically resizing
  strings.

Vulnerable_7.c:62:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified.

Vulnerable_7.c:68:  [1] (buffer) MultiByteToWideChar:
  Requires maximum length in CHARACTERS, not bytes (CWE-120).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified. Risk is very low, the length
  appears to be in characters not bytes.

Vulnerable_7.c:70:  [1] (buffer) MultiByteToWideChar:
  Requires maximum length in CHARACTERS, not bytes (CWE-120).
  --------------------------------------------------------------------------
  [+] NO countermeasures,unless specified. Risk is very low, the length
  appears to be in characters not bytes.



=========================================================================
                          Your Code Report           
=========================================================================
ANALYSIS SUMMARY:

Hits = 40
Lines analyzed = 121 in approximately 0.02 seconds (5358 lines/second)
Physical Source Lines of Code (SLOC) = 84
Hits@level = [0]  16 [1]   9 [2]   9 [3]   3 [4]  10 [5]   9
Hits@level+ = [0+]  56 [1+]  40 [2+]  31 [3+]  22 [4+]  19 [5+]   9
Hits/KSLOC@level+ = [0+] 666.667 [1+] 476.19 [2+] 369.048 [3+] 261.905 [4+] 226.19 [5+] 107.143
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
=======================================================================
                       End of Code Analysis                 
=======================================================================
